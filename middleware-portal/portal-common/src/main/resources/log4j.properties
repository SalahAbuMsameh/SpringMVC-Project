#initialize two loggers (used to be called categories) CONS and FILE to log events >= DEBUG
#replace DEBUG with INFO in production (Note that DEBUG < INFO)
log4j.rootLogger=DEBUG, console, FILE


#settings for CONS: output to console and use customized pattern
#optionally comment this logger in production
log4j.appender.console=org.apache.log4j.ConsoleAppender
#log4j.appender.console.Threshold=INFO
#For the GUI appender use: log4j.appender.CONS=org.apache.log4j.lf5.LF5Appender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{dd-MMM-yyyy HH:mm:ss} [%-5p] %c{1}:(%L) - %m%n


#settings for FILE: output to file using standard TTCC pattern
#this option backs up the file daily with a date stamp
log4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender
log4j.appender.FILE.DatePattern='.'yyyy-MM-dd

#this option backs up the file after is reaches a specified size
#log4j.appender.FILE=org.apache.log4j.RollingFileAppender
#log4j.appender.FILE.MaxFileSize=1KB
#log4j.appender.FILE.MaxBackupIndex=3

#optionally change the filepath to the log file
#log4j.appender.FILE.File=${log.location}
log4j.appender.FILE.File=./service.log
log4j.appender.FILE.layout=org.apache.log4j.TTCCLayout
log4j.appender.FILE.layout.ContextPrinting=true
log4j.appender.FILE.layout.DateFormat=ISO8601
log4j.appender.FILE.Threshold=DEBUG
log4j.appender.DEBUG=true
# For the general syntax of property based configuration files see the
# documentation of org.apache.log4j.PropertyConfigurator.
# 
# Specifying the layout (what data should be displayed and how)
# Conversion characters:
# c : the Logger (Category)
# d : the date/time
# l : location information of the caller which generated the logging event
# L : line number from where the logging request was issued
# m : message associated with the logging event
# M : the method name where the logging request was issued
# n : the line separator character
# p : priority of the logging event
# t : the name of the thread that generated the logging event
# r : the number of milliseconds elapsed since the start of the application 
#
#-Write as %X, where X is the conversion character.
#-When using multiple conversion characters, data will appear in the same order
#   as the order of the conversion characters here.
#-Characters other than the conversion characters will be displayed as-is.
#-OPTIONS:
# %d: The date conversion specifier may be followed by a date format specifier
#	  enclosed between braces. Example: %d{HH:mm:ss,SSS} 
#	  or %d{dd MMM yyyy HH:mm:ss,SSS}.If no date format specifier is given
#	  then ISO8601 format is assumed. For faster performance, use %d{DATE}.
# Optionally, use format modifiers between the percent sign and the conversion
# character to change the minimum field width, the maximum field width and text
# justification within a field. 
# Use the minus sign (-) to left-justify within a field.(default=right-justify)
# Use a positive integer to specify the minimum field width. 
# Use a period followed by a positive integer to specify the maximum field width.